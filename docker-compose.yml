version: '3.8'

services:
  fastapi-auth:
    container_name: fastapi-auth-up-all
    build:
      context: ../fastapi-auth
      dockerfile: Dockerfile  
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /app/.venv
    networks:
      - services
    expose:
      - 8000
    command: uvicorn main:app --host 0.0.0.0 --port 8000  

  authdb:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth_db
    ports:
      - "5434:5434"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    networks:
      - services

  spreadsheet-importer:
    build:
      context: ../spreadsheet-importer
      dockerfile: Dockerfile
    container_name: spreadsheet-importer-up-all
    ports:
      - "8001:8001"
    networks:
      - services
      - rabbitmq-network
    depends_on:
      - db

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: spreadsheet_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - services

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-up-all
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    # env_file:
    #   - ../notification-service/.env
    networks:
      - services
      - rabbitmq-network

  notification-service:
    build:
      context: ../notification-service
      dockerfile: Dockerfile
    container_name: notification-service-up-all
    ports:
      - "8080:8080"
    depends_on:
      - rabbitmq
    # env_file:
    #   - ../notification-service/.env
    networks:
      - services
      - rabbitmq-network

  planilha-frontend:
    build:
      context: ../planilha-frontend
      dockerfile: Dockerfile
    container_name: planilha-frontend-up-all
    ports:
      - "3000:80"
    # env_file:
    #   - ../planilha-frontend/.env
    networks:
      - services

  
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - services
      
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:  
      - 3001:3000
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - ./grafana/config.monitoring
    networks:
      - services

networks:
  services:
    external: true
  rabbitmq-network:
    external: true

volumes:
  postgres_data:
  auth_postgres_data: